#!/usr/bin/env python
#       This program is free software; you can redistribute it and/or modify
#       it under the terms of the GNU General Public License as published by
#       the Free Software Foundation; either version 2 of the License, or
#       (at your option) any later version.
#       
#       This program is distributed in the hope that it will be useful,
#       but WITHOUT ANY WARRANTY; without even the implied warranty of
#       MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#       GNU General Public License for more details.
#       
#       You should have received a copy of the GNU General Public License
#       along with this program; if not, write to the Free Software
#       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#       MA 02110-1301, USA.
#
#       Copyright 2009 Markus Korn <thekorn@gmx.de>
#

import sys
import time
import logging
import json
import urlparse

from optparse import OptionParser

def vararg_callback(option, opt_str, value, parser):
    assert value is None
    value = []

    def floatable(str):
        try:
            float(str)
            return True
        except ValueError:
            return False

    for arg in parser.rargs:
        # stop on --foo like options
        if arg[:2] == "--" and len(arg) > 2:
            break
        # stop on -a, but not on -3 or -3.0
        if arg[:1] == "-" and len(arg) > 1 and not floatable(arg):
            break
        value.append(arg)

    del parser.rargs[:len(value)]
    setattr(parser.values, option.dest, value)
    
def get_origin(uri):
    scheme, netloc, path, query, fragment = urlparse.urlsplit(uri)
    origin = urlparse.urlunsplit((scheme, netloc, "", "", ""))
    return origin
    
def file_downloaded(location, title):
    # lazy import to catch the error
    from zeitgeist.client import ZeitgeistClient
    from zeitgeist.datamodel import Event, Subject, Interpretation, Manifestation
    from zeitgeist.mimetypes import get_interpretation_for_mimetype
    import gio

    logging.debug("Zeitgeist extension for firefox is sending a create event '%s'" %location)

    client = ZeitgeistClient()
    f = gio.File(location)
    if (not f.query_exists()): return
    fi = f.query_info(gio.FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE)
    mimetype = fi.get_content_type()
    interpretation = get_interpretation_for_mimetype(mimetype)
    
    subject = Subject.new_for_values(
        uri=f.get_uri(),
        interpretation=unicode(interpretation),
        manifestation=unicode(Manifestation.FILE_DATA_OBJECT),
        origin=unicode(f.get_parent().get_uri()), #TBD
        mimetype=mimetype,
        text=title.decode("UTF-8"),
    )
    event = Event.new_for_values(
        timestamp=int(time.time()*1000),
        interpretation=unicode(Interpretation.ACCESS_EVENT),
        manifestation=unicode(Manifestation.USER_ACTIVITY),
        actor="application://firefox.desktop",
        subjects=[subject,]
    )
    client.insert_event(event)
    
def single_insert(location, title, mimetype=None, tags=None):
    # lazy import to catch the error
    from zeitgeist.client import ZeitgeistClient
    from zeitgeist.datamodel import Event, Subject, Interpretation, Manifestation
    from zeitgeist.mimetypes import get_interpretation_for_mimetype
        
    tags = tags or list()
    logging.debug("Zeitgeist extension for firefox is sending a visit event '%s'" %location)
    
    client = ZeitgeistClient()
    mimetype = mimetype or u"text/html"
    interpretation = Interpretation.HTML_DOCUMENT if mimetype == u"text/html" else get_interpretation_for_mimetype(mimetype)

    subject = Subject.new_for_values(
        uri=location.decode("UTF-8"),
        interpretation=unicode(interpretation),
        manifestation=unicode(Manifestation.REMOTE_DATA_OBJECT), #TBD
        origin=unicode(get_origin(location)),
        mimetype=mimetype,
        text=title.decode("UTF-8"),
    )
    event = Event.new_for_values(
        timestamp=int(time.time()*1000),
        interpretation=unicode(Interpretation.ACCESS_EVENT),
        manifestation=unicode(Manifestation.USER_ACTIVITY),
        actor="application://firefox.desktop",
        subjects=[subject,]
    )
    client.insert_event(event)
    
def parse_cmdline_args():
    parser = OptionParser()
    parser.add_option(
        "--location", dest="location", help="uri related to the event", metavar="URI", default=None,
    )
    parser.add_option(
        "--title", dest="title", help="title to the event", metavar="TITLE", default=None,
    )
    parser.add_option(
        "--mimetype", dest="mimetype", help="mimetype of the uri", metavar="MIME", default=None,
    )
    parser.add_option(
        "--download", dest="download",
        help="indicate that the location parameter contains path to newly downloaded file", action="store_true"
    )
    parser.add_option(
        "--tags", dest="tags", action="callback", callback=vararg_callback,
        help="tag to the event", metavar="TAG1 TAG2 ...", default=[],
    )
    return parser.parse_args()
    

def main():
    options, args = parse_cmdline_args()
    assert not args, args
    
    if options.download and options.location is not None:
        return file_downloaded(options.location, options.title)
    elif options.location is not None and options.title is not None:
        return single_insert(options.location, options.title, options.mimetype, options.tags)
    else:
        raise ValueError("wrong arguments")

if __name__ == "__main__":
    try:
        main()
    except RuntimeError, e:
        logging.error("Failed to send event to the zeitgeist engine: %s" %e)
        sys.exit(100)
    sys.exit(0)
    
