/* rhythmdb.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "RhythmDB", lower_case_cprefix = "rhythm_db_")]
namespace RhythmDB {
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h", cname = "RhythmDB")]
	public class DB : GLib.Object {
		[CCode (cname = "rhythmdb_new", type = "RhythmDB*", has_construct_function = false)]
		public DB (string name);
		[CCode (cname = "rhythmdb_add_uri")]
		public static void add_uri (RhythmDB.DB db, string uri);
		[CCode (cname = "rhythmdb_add_uri_with_types")]
		public static void add_uri_with_types (RhythmDB.DB db, string uri, RhythmDB.EntryType type, RhythmDB.EntryType ignore_type, RhythmDB.EntryType error_type);
		[CCode (cname = "rhythmdb_commit")]
		public static void commit (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_compute_status_normal")]
		public static unowned string compute_status_normal (int n_songs, long duration, uint64 size, string singular, string plural);
		[CCode (cname = "rhythmdb_dispose_monitoring")]
		public static void dispose_monitoring (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_do_full_query")]
		public static void do_full_query (RhythmDB.DB db, RhythmDB.QueryResults results);
		[CCode (cname = "rhythmdb_do_full_query_async")]
		public static void do_full_query_async (RhythmDB.DB db, RhythmDB.QueryResults results);
		[CCode (cname = "rhythmdb_do_full_query_async_parsed")]
		public static void do_full_query_async_parsed (RhythmDB.DB db, RhythmDB.QueryResults results, RhythmDB.Query query);
		[CCode (cname = "rhythmdb_do_full_query_parsed")]
		public static void do_full_query_parsed (RhythmDB.DB db, RhythmDB.QueryResults results, RhythmDB.Query query);
		[CCode (cname = "rhythmdb_emit_entry_added")]
		public static void emit_entry_added (RhythmDB.DB db, RhythmDB.Entry entry);
		[CCode (cname = "rhythmdb_emit_entry_deleted")]
		public static void emit_entry_deleted (RhythmDB.DB db, RhythmDB.Entry entry);
		[CCode (cname = "rhythmdb_emit_entry_extra_metadata_notify")]
		public static void emit_entry_extra_metadata_notify (RhythmDB.DB db, RhythmDB.Entry entry, string property_name, GLib.Value metadata);
		[CCode (cname = "rhythmdb_error_quark")]
		public static GLib.Quark error_quark ();
		[CCode (cname = "rhythmdb_evaluate_query")]
		public static bool evaluate_query (RhythmDB.DB db, RhythmDB.Query query, RhythmDB.Entry entry);
		[CCode (cname = "rhythmdb_finalize_monitoring")]
		public static void finalize_monitoring (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_get_progress_info")]
		public static void get_progress_info (RhythmDB.DB db, out unowned string text, float progress);
		[CCode (cname = "rhythmdb_get_property_type")]
		public static GLib.Type get_property_type (RhythmDB.DB db, uint property_id);
		[NoWrapper]
		public virtual void impl_do_full_query (RhythmDB.DB db, RhythmDB.Query query, RhythmDB.QueryResults results, bool cancel);
		[NoWrapper]
		public virtual int64 impl_entry_count (RhythmDB.DB db);
		[NoWrapper]
		public virtual int64 impl_entry_count_by_type (RhythmDB.DB db, RhythmDB.EntryType type);
		[NoWrapper]
		public virtual void impl_entry_delete (RhythmDB.DB db, RhythmDB.Entry entry);
		[NoWrapper]
		public virtual void impl_entry_delete_by_type (RhythmDB.DB db, RhythmDB.EntryType type);
		[NoWrapper]
		public virtual void impl_entry_foreach (RhythmDB.DB db, GLib.Func func, void* data);
		[NoWrapper]
		public virtual void impl_entry_foreach_by_type (RhythmDB.DB db, RhythmDB.EntryType type, GLib.Func func, void* data);
		[NoWrapper]
		public virtual void impl_entry_get (RhythmDB.DB db, RhythmDB.Entry entry, uint propid, GLib.Value value);
		[NoWrapper]
		public virtual bool impl_entry_keyword_add (RhythmDB.DB db, RhythmDB.Entry entry, RhythmDB.RBRefString keyword);
		[NoWrapper]
		public virtual bool impl_entry_keyword_has (RhythmDB.DB db, RhythmDB.Entry entry, RhythmDB.RBRefString keyword);
		[NoWrapper]
		public virtual bool impl_entry_keyword_remove (RhythmDB.DB db, RhythmDB.Entry entry, RhythmDB.RBRefString keyword);
		[NoWrapper]
		public virtual unowned GLib.List impl_entry_keywords_get (RhythmDB.DB db, RhythmDB.Entry entry);
		[NoWrapper]
		public virtual void impl_entry_new (RhythmDB.DB db, RhythmDB.Entry entry);
		[NoWrapper]
		public virtual bool impl_entry_set (RhythmDB.DB db, RhythmDB.Entry entry, uint propid, GLib.Value value);
		[NoWrapper]
		public virtual void impl_entry_type_registered (RhythmDB.DB db, string name, RhythmDB.EntryType type);
		[NoWrapper]
		public virtual bool impl_evaluate_query (RhythmDB.DB db, RhythmDB.Query query, RhythmDB.Entry entry);
		[NoWrapper]
		public virtual bool impl_load (RhythmDB.DB db, GLib.Cancellable cancel) throws GLib.Error;
		[NoWrapper]
		public virtual unowned RhythmDB.Entry impl_lookup_by_id (RhythmDB.DB db, int id);
		[NoWrapper]
		public virtual unowned RhythmDB.Entry impl_lookup_by_location (RhythmDB.DB db, RhythmDB.RBRefString uri);
		[NoWrapper]
		public virtual void impl_save (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_init_monitoring")]
		public static void init_monitoring (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_is_busy")]
		public static bool is_busy (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_load")]
		public static void load (RhythmDB.DB db);
		[NoWrapper]
		public virtual void load_error (RhythmDB.DB db, string uri, string msg);
		[CCode (cname = "rhythmdb_monitor_uri_path")]
		public static void monitor_uri_path (RhythmDB.DB db, string uri) throws GLib.Error;
		[CCode (cname = "rhythmdb_nice_elt_name_from_propid")]
		public static unowned string nice_elt_name_from_propid (RhythmDB.DB db, RhythmDB.PropType propid);
		[CCode (cname = "rhythmdb_propid_from_nice_elt_name")]
		public static int propid_from_nice_elt_name (RhythmDB.DB db, string name);
		[CCode (cname = "rhythmdb_read_encoded_property")]
		public static void read_encoded_property (RhythmDB.DB db, string data, RhythmDB.PropType propid, GLib.Value val);
		[CCode (cname = "rhythmdb_save")]
		public static void save (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_save_async")]
		public static void save_async (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_shutdown")]
		public static void shutdown (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_start_action_thread")]
		public static void start_action_thread (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_start_monitoring")]
		public static void start_monitoring (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_stop_monitoring")]
		public static void stop_monitoring (RhythmDB.DB db);
		[NoAccessorMethod]
		public bool dry_run { get; set; }
		[NoAccessorMethod]
		public string name { owned get; set; }
		[NoAccessorMethod]
		public bool no_update { get; set; }
		public virtual signal unowned GLib.MountOperation create_mount_op ();
		public virtual signal void entry_added (RhythmDB.Entry entry);
		public virtual signal void entry_changed (RhythmDB.Entry entry, GLib.ValueArray changes);
		public virtual signal void entry_deleted (RhythmDB.Entry entry);
		public virtual signal void entry_extra_metadata_gather (RhythmDB.Entry entry, RhythmDB.RBStringValueMap data);
		public virtual signal void entry_extra_metadata_notify (RhythmDB.Entry entry, string field, GLib.Value metadata);
		public virtual signal GLib.Value entry_extra_metadata_request (RhythmDB.Entry entry);
		public virtual signal void entry_keyword_added (RhythmDB.Entry entry, RhythmDB.RBRefString keyword);
		public virtual signal void entry_keyword_removed (RhythmDB.Entry entry, RhythmDB.RBRefString keyword);
		public virtual signal void load_complete ();
		public virtual signal bool missing_plugins (string[] p0, string[] p1, GLib.Closure p2);
		public virtual signal void read_only (bool readonly);
		public virtual signal void save_complete ();
		public virtual signal void save_error (string uri, void* error);
	}
	[Compact]
	[CCode (ref_function = "rhythmdb_entry_ref", unref_function = "rhythmdb_entry_unref", type_id = "RHYTHM_DB_TYPE_ENTRY", cheader_filename = "rhythmdb/rhythmdb.h")]
	public class Entry {
		public weak RhythmDB.RBRefString album;
		public weak RhythmDB.RBRefString album_sortname;
		public weak RhythmDB.RBRefString artist;
		public weak RhythmDB.RBRefString artist_sortname;
		public ulong bitrate;
		public weak RhythmDB.RBRefString comment;
		public void* data;
		public GLib.Date date;
		public ulong discnum;
		public ulong duration;
		public uint64 file_size;
		public ulong first_seen;
		public void* first_seen_str;
		public uint flags;
		public weak RhythmDB.RBRefString genre;
		public uint id;
		public ulong last_played;
		public void* last_played_str;
		public ulong last_seen;
		public void* last_seen_str;
		public weak RhythmDB.RBRefString location;
		public weak RhythmDB.RBRefString mimetype;
		public weak RhythmDB.RBRefString mountpoint;
		public ulong mtime;
		public weak RhythmDB.RBRefString musicbrainz_albumartistid;
		public weak RhythmDB.RBRefString musicbrainz_albumid;
		public weak RhythmDB.RBRefString musicbrainz_artistid;
		public weak RhythmDB.RBRefString musicbrainz_trackid;
		public long play_count;
		public weak RhythmDB.RBRefString playback_error;
		public double rating;
		public int refcount;
		public weak RhythmDB.RBRefString title;
		public ulong tracknum;
		public weak RhythmDB.EntryType type;
		[CCode (cname = "rhythmdb_entry_new", has_construct_function = false)]
		public Entry (RhythmDB.DB db, RhythmDB.EntryType type, string uri);
		[CCode (cname = "rhythmdb_entry_allocate")]
		public static unowned RhythmDB.Entry allocate (RhythmDB.DB db, RhythmDB.EntryType type);
		[CCode (cname = "rhythmdb_entry_count")]
		public static int64 count (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_entry_count_by_type")]
		public static int64 count_by_type (RhythmDB.DB db, RhythmDB.EntryType entry_type);
		[CCode (cname = "rhythmdb_entry_delete")]
		public static void @delete (RhythmDB.DB db, RhythmDB.Entry entry);
		[CCode (cname = "rhythmdb_entry_delete_by_type")]
		public static void delete_by_type (RhythmDB.DB db, RhythmDB.EntryType type);
		[CCode (cname = "rhythmdb_entry_dup_string")]
		public unowned string dup_string (RhythmDB.PropType propid);
		[CCode (cname = "rhythmdb_entry_example_new")]
		public static unowned RhythmDB.Entry example_new (RhythmDB.DB db, RhythmDB.EntryType type, string uri);
		[CCode (cname = "rhythmdb_entry_foreach")]
		public static void @foreach (RhythmDB.DB db, GLib.Func func, void* data);
		[CCode (cname = "rhythmdb_entry_foreach_by_type")]
		public static void foreach_by_type (RhythmDB.DB db, RhythmDB.EntryType entry_type, GLib.Func func, void* data);
		[CCode (cname = "rhythmdb_entry_gather_metadata")]
		public static unowned RhythmDB.RBStringValueMap gather_metadata (RhythmDB.DB db, RhythmDB.Entry entry);
		[CCode (cname = "rhythmdb_entry_get")]
		public static void @get (RhythmDB.DB db, RhythmDB.Entry entry, RhythmDB.PropType propid, GLib.Value val);
		[CCode (cname = "rhythmdb_entry_get_boolean")]
		public bool get_boolean (RhythmDB.PropType propid);
		[CCode (cname = "rhythmdb_entry_get_double")]
		public double get_double (RhythmDB.PropType propid);
		[CCode (cname = "rhythmdb_entry_get_entry_type")]
		public unowned RhythmDB.EntryType get_entry_type ();
		[CCode (cname = "rhythmdb_entry_get_playback_uri")]
		public unowned string get_playback_uri ();
		[CCode (cname = "rhythmdb_entry_get_pointer")]
		public void* get_pointer (RhythmDB.PropType propid);
		[CCode (cname = "rhythmdb_entry_get_refstring")]
		public unowned RhythmDB.RBRefString get_refstring (RhythmDB.PropType propid);
		[CCode (cname = "rhythmdb_entry_get_string")]
		public unowned string get_string (RhythmDB.PropType propid);
		[CCode (cname = "rhythmdb_entry_get_type_data")]
		public void* get_type_data (uint expected_size);
		[CCode (cname = "rhythmdb_entry_get_uint64")]
		public uint64 get_uint64 (RhythmDB.PropType propid);
		[CCode (cname = "rhythmdb_entry_get_ulong")]
		public ulong get_ulong (RhythmDB.PropType propid);
		[CCode (cname = "rhythmdb_entry_ignore_get_type")]
		public static unowned RhythmDB.EntryType ignore_get_type ();
		[CCode (cname = "rhythmdb_entry_import_error_get_type")]
		public static unowned RhythmDB.EntryType import_error_get_type ();
		[CCode (cname = "rhythmdb_entry_insert")]
		public static void insert (RhythmDB.DB db, RhythmDB.Entry entry);
		[CCode (cname = "rhythmdb_entry_is_editable")]
		public static bool is_editable (RhythmDB.DB db, RhythmDB.Entry entry);
		[CCode (cname = "rhythmdb_entry_is_lossless")]
		public bool is_lossless ();
		[CCode (cname = "rhythmdb_entry_keyword_add")]
		public static bool keyword_add (RhythmDB.DB db, RhythmDB.Entry entry, RhythmDB.RBRefString keyword);
		[CCode (cname = "rhythmdb_entry_keyword_has")]
		public static bool keyword_has (RhythmDB.DB db, RhythmDB.Entry entry, RhythmDB.RBRefString keyword);
		[CCode (cname = "rhythmdb_entry_keyword_remove")]
		public static bool keyword_remove (RhythmDB.DB db, RhythmDB.Entry entry, RhythmDB.RBRefString keyword);
		[CCode (cname = "rhythmdb_entry_keywords_get")]
		public static unowned GLib.List keywords_get (RhythmDB.DB db, RhythmDB.Entry entry);
		[CCode (cname = "rhythmdb_entry_lookup_by_id")]
		public static unowned RhythmDB.Entry lookup_by_id (RhythmDB.DB db, int id);
		[CCode (cname = "rhythmdb_entry_lookup_by_location")]
		public static unowned RhythmDB.Entry lookup_by_location (RhythmDB.DB db, string uri);
		[CCode (cname = "rhythmdb_entry_lookup_by_location_refstring")]
		public static unowned RhythmDB.Entry lookup_by_location_refstring (RhythmDB.DB db, RhythmDB.RBRefString uri);
		[CCode (cname = "rhythmdb_entry_lookup_from_string")]
		public static unowned RhythmDB.Entry lookup_from_string (RhythmDB.DB db, string str, bool is_id);
		[CCode (cname = "rhythmdb_entry_move_to_trash")]
		public static void move_to_trash (RhythmDB.DB db, RhythmDB.Entry entry);
		[CCode (cname = "rhythmdb_entry_podcast_feed_get_type")]
		public static unowned RhythmDB.EntryType podcast_feed_get_type ();
		[CCode (cname = "rhythmdb_entry_podcast_post_get_type")]
		public static unowned RhythmDB.EntryType podcast_post_get_type ();
		[CCode (cname = "rhythmdb_entry_register_type")]
		public static unowned RhythmDB.EntryType register_type (RhythmDB.DB db, string name);
		[CCode (cname = "rhythmdb_entry_request_extra_metadata")]
		public static GLib.Value request_extra_metadata (RhythmDB.DB db, RhythmDB.Entry entry, string property_name);
		[CCode (cname = "rhythmdb_entry_set")]
		public static void @set (RhythmDB.DB db, RhythmDB.Entry entry, uint propid, GLib.Value value);
		[CCode (cname = "rhythmdb_entry_set_internal")]
		public static void set_internal (RhythmDB.DB db, RhythmDB.Entry entry, bool notify_if_inserted, uint propid, GLib.Value value);
		[CCode (cname = "rhythmdb_entry_set_visibility")]
		public static void set_visibility (RhythmDB.DB db, RhythmDB.Entry entry, bool visibility);
		[CCode (cname = "rhythmdb_entry_song_get_type")]
		public static unowned RhythmDB.EntryType song_get_type ();
	}
	[Compact]
	[CCode (type_id = "RHYTHM_DB_TYPE_ENTRY_CHANGE", cheader_filename = "rhythmdb/rhythmdb.h")]
	public class EntryChange {
		public GLib.Value @new;
		public GLib.Value old;
		public RhythmDB.PropType prop;
	}
	[Compact]
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public class EntryType {
		[CCode (cname = "rhythmdb_entry_type_foreach")]
		public static void @foreach (RhythmDB.DB db, GLib.HFunc func, void* data);
		[CCode (cname = "rhythmdb_entry_type_get_by_name")]
		public static unowned RhythmDB.EntryType get_by_name (RhythmDB.DB db, string name);
	}
	[Compact]
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public class EntryType_ {
		public weak RhythmDB.EntryCanSyncFunc can_sync_metadata;
		public void* can_sync_metadata_data;
		public weak GLib.DestroyNotify can_sync_metadata_destroy;
		public RhythmDB.EntryCategory category;
		public uint entry_type_data_size;
		public weak RhythmDB.EntryStringFunc get_playback_uri;
		public void* get_playback_uri_data;
		public weak GLib.DestroyNotify get_playback_uri_destroy;
		public bool has_playlists;
		public weak string name;
		public weak RhythmDB.EntryActionFunc post_entry_create;
		public void* post_entry_create_data;
		public weak GLib.DestroyNotify post_entry_create_destroy;
		public weak RhythmDB.EntryActionFunc pre_entry_destroy;
		public void* pre_entry_destroy_data;
		public weak GLib.DestroyNotify pre_entry_destroy_destroy;
		public bool save_to_disk;
		public weak RhythmDB.EntrySyncFunc sync_metadata;
		public void* sync_metadata_data;
		public weak GLib.DestroyNotify sync_metadata_destroy;
	}
	[Compact]
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public class Event {
		public weak RhythmDB.EntryChange change;
		public weak RhythmDB.DB db;
		public weak RhythmDB.Entry entry;
		public weak RhythmDB.EntryType entry_type;
		public weak GLib.Error error;
		public weak RhythmDB.EntryType error_type;
		public weak GLib.FileInfo file_info;
		public weak RhythmDB.EntryType ignore_type;
		public weak RhythmDB.RBMetaData metadata;
		public weak RhythmDB.RBRefString real_uri;
		public weak RhythmDB.QueryResults results;
		public bool signal_change;
		public int type;
		public weak RhythmDB.RBRefString uri;
	}
	[Compact]
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public class PodcastFields {
		public weak RhythmDB.RBRefString copyright;
		public weak RhythmDB.RBRefString description;
		public weak RhythmDB.RBRefString image;
		public weak RhythmDB.RBRefString lang;
		public ulong post_time;
		public ulong status;
		public weak RhythmDB.RBRefString subtitle;
		public weak RhythmDB.RBRefString summary;
	}
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public class PropertyModel : GLib.Object, Gtk.TreeModel, RhythmDB.RbTreeDragSource {
		[CCode (cname = "rhythmdb_property_model_new", has_construct_function = false)]
		public PropertyModel (RhythmDB.DB db, RhythmDB.PropType propid);
		[CCode (cname = "rhythmdb_property_model_enable_drag")]
		public void enable_drag (Gtk.TreeView view);
		[CCode (cname = "rhythmdb_property_model_iter_from_string")]
		public bool iter_from_string (string name, Gtk.TreeIter iter);
		[NoAccessorMethod]
		public RhythmDB.DB db { owned get; construct; }
		[NoAccessorMethod]
		public int prop { get; construct; }
		[NoAccessorMethod]
		public RhythmDB.QueryModel query_model { owned get; set; }
		public virtual signal void pre_row_deletion ();
	}
	[Compact]
	[CCode (copy_function = "rhythmdb_query_copy", free_function = "rhythmdb_query_free", cheader_filename = "rhythmdb/rhythmdb.h")]
	public class Query {
		[CCode (cname = "rhythmdb_query_append")]
		public static void append (RhythmDB.DB db, RhythmDB.Query query);
		[CCode (cname = "rhythmdb_query_append_params")]
		public static void append_params (RhythmDB.DB db, RhythmDB.Query query, RhythmDB.QueryType type, RhythmDB.PropType prop, GLib.Value value);
		[CCode (cname = "rhythmdb_query_append_prop_multiple")]
		public static void append_prop_multiple (RhythmDB.DB db, RhythmDB.Query query, RhythmDB.PropType propid, GLib.List items);
		[CCode (cname = "rhythmdb_query_concatenate")]
		public void concatenate (RhythmDB.Query query2);
		[CCode (cname = "rhythmdb_query_copy")]
		public unowned RhythmDB.Query copy ();
		[CCode (cname = "rhythmdb_query_is_time_relative")]
		public static bool is_time_relative (RhythmDB.DB db, RhythmDB.Query query);
		[CCode (cname = "rhythmdb_query_parse")]
		public static unowned RhythmDB.Query parse (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_query_parse_valist")]
		public static unowned GLib.PtrArray parse_valist (RhythmDB.DB db, void* args);
		[CCode (cname = "rhythmdb_query_preprocess")]
		public static void preprocess (RhythmDB.DB db, RhythmDB.Query query);
		[CCode (cname = "rhythmdb_query_to_string")]
		public static unowned string to_string (RhythmDB.DB db, RhythmDB.Query query);
	}
	[Compact]
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public class QueryData {
		public uint propid;
		public weak RhythmDB.Query subquery;
		public uint type;
		public GLib.Value val;
	}
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public class QueryModel : GLib.Object, RhythmDB.QueryResults, Gtk.TreeModel, RhythmDB.RbTreeDragSource, RhythmDB.RbTreeDragDest {
		[CCode (cname = "rhythmdb_query_model_new", has_construct_function = false)]
		public QueryModel (RhythmDB.DB db, GLib.PtrArray query, GLib.CompareDataFunc sort_func, void* sort_data, GLib.DestroyNotify sort_data_destroy, bool sort_reverse);
		[CCode (cname = "rhythmdb_query_model_add_entry")]
		public void add_entry (RhythmDB.Entry entry, int index);
		[CCode (cname = "rhythmdb_query_model_album_sort_func")]
		public static int album_sort_func (RhythmDB.Entry a, RhythmDB.Entry b, void* data);
		[CCode (cname = "rhythmdb_query_model_artist_sort_func")]
		public static int artist_sort_func (RhythmDB.Entry a, RhythmDB.Entry b, void* data);
		[CCode (cname = "rhythmdb_query_model_bitrate_sort_func")]
		public static int bitrate_sort_func (RhythmDB.Entry a, RhythmDB.Entry b, void* data);
		[CCode (cname = "rhythmdb_query_model_chain")]
		public void chain (RhythmDB.QueryModel @base, bool import_entries);
		[CCode (cname = "rhythmdb_query_model_compute_status_normal")]
		public unowned string compute_status_normal (string singular, string plural);
		[CCode (cname = "rhythmdb_query_model_copy_contents")]
		public void copy_contents (RhythmDB.QueryModel src);
		[CCode (cname = "rhythmdb_query_model_date_sort_func")]
		public static int date_sort_func (RhythmDB.Entry a, RhythmDB.Entry b, void* data);
		[CCode (cname = "rhythmdb_query_model_double_ceiling_sort_func")]
		public static int double_ceiling_sort_func (RhythmDB.Entry a, RhythmDB.Entry b, void* data);
		[CCode (cname = "rhythmdb_query_model_new_empty", has_construct_function = false)]
		public QueryModel.empty (RhythmDB.DB db);
		[CCode (cname = "rhythmdb_query_model_entry_to_iter")]
		public bool entry_to_iter (RhythmDB.Entry entry, Gtk.TreeIter iter);
		[CCode (cname = "rhythmdb_query_model_genre_sort_func")]
		public static int genre_sort_func (RhythmDB.Entry a, RhythmDB.Entry b, void* data);
		[CCode (cname = "rhythmdb_query_model_get_duration")]
		public long get_duration ();
		[CCode (cname = "rhythmdb_query_model_get_next_from_entry")]
		public unowned RhythmDB.Entry get_next_from_entry (RhythmDB.Entry entry);
		[CCode (cname = "rhythmdb_query_model_get_previous_from_entry")]
		public unowned RhythmDB.Entry get_previous_from_entry (RhythmDB.Entry entry);
		[CCode (cname = "rhythmdb_query_model_get_size")]
		public uint64 get_size ();
		[CCode (cname = "rhythmdb_query_model_has_pending_changes")]
		public bool has_pending_changes ();
		[CCode (cname = "rhythmdb_query_model_iter_to_entry")]
		public unowned RhythmDB.Entry iter_to_entry (Gtk.TreeIter entry_iter);
		[CCode (cname = "rhythmdb_query_model_location_sort_func")]
		public static int location_sort_func (RhythmDB.Entry a, RhythmDB.Entry b, void* data);
		[CCode (cname = "rhythmdb_query_model_move_entry")]
		public void move_entry (RhythmDB.Entry entry, int index);
		[CCode (cname = "rhythmdb_query_model_reapply_query")]
		public void reapply_query (bool filter);
		[CCode (cname = "rhythmdb_query_model_remove_entry")]
		public bool remove_entry (RhythmDB.Entry entry);
		[CCode (cname = "rhythmdb_query_model_set_sort_order")]
		public void set_sort_order (GLib.CompareDataFunc sort_func, void* sort_data, GLib.DestroyNotify sort_data_destroy, bool sort_reverse);
		[CCode (cname = "rhythmdb_query_model_shuffle_entries")]
		public void shuffle_entries ();
		[CCode (cname = "rhythmdb_query_model_string_sort_func")]
		public static int string_sort_func (RhythmDB.Entry a, RhythmDB.Entry b, void* data);
		[CCode (cname = "rhythmdb_query_model_title_sort_func")]
		public static int title_sort_func (RhythmDB.Entry a, RhythmDB.Entry b, void* data);
		[CCode (cname = "rhythmdb_query_model_track_sort_func")]
		public static int track_sort_func (RhythmDB.Entry a, RhythmDB.Entry b, void* data);
		[CCode (cname = "rhythmdb_query_model_tree_path_to_entry")]
		public unowned RhythmDB.Entry tree_path_to_entry (Gtk.TreePath path);
		[CCode (cname = "rhythmdb_query_model_ulong_sort_func")]
		public static int ulong_sort_func (RhythmDB.Entry a, RhythmDB.Entry b, void* data);
		[NoAccessorMethod]
		public RhythmDB.QueryModel base_model { owned get; set construct; }
		[NoAccessorMethod]
		public RhythmDB.DB db { owned get; construct; }
		[NoAccessorMethod]
		public RhythmDB.QueryModelLimitType limit_type { get; construct; }
		[NoAccessorMethod]
		public GLib.ValueArray limit_value { owned get; construct; }
		[NoAccessorMethod]
		public void* query { get; set; }
		[NoAccessorMethod]
		public bool show_hidden { get; set construct; }
		[NoAccessorMethod]
		public void* sort_data { get; set; }
		[NoAccessorMethod]
		public void* sort_data_destroy { get; set; }
		[NoAccessorMethod]
		public void* sort_func { get; set; }
		[NoAccessorMethod]
		public bool sort_reverse { get; set; }
		public virtual signal void complete ();
		public virtual signal void entry_prop_changed (RhythmDB.Entry entry, int prop, void* old, void* new_value);
		public virtual signal void entry_removed (RhythmDB.Entry entry);
		public virtual signal bool filter_entry_drop (RhythmDB.Entry entry);
		public virtual signal void non_entry_dropped (string uri, int position);
		public virtual signal void post_entry_delete (RhythmDB.Entry entry);
	}
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public class RBMetaData : GLib.Object {
		[CCode (cname = "rb_metadata_new", type = "RBMetaData*", has_construct_function = false)]
		public RBMetaData ();
		[CCode (cname = "rb_metadata_can_save")]
		public static bool can_save (RhythmDB.RBMetaData md, string mimetype);
		[CCode (cname = "rb_metadata_error_quark")]
		public static GLib.Quark error_quark ();
		[CCode (cname = "rb_metadata_get")]
		public static bool @get (RhythmDB.RBMetaData md, RhythmDB.RBMetaDataField field, GLib.Value val);
		[CCode (cname = "rb_metadata_get_field_name")]
		public static unowned string get_field_name (RhythmDB.RBMetaDataField field);
		[CCode (cname = "rb_metadata_get_field_type")]
		public static GLib.Type get_field_type (RhythmDB.RBMetaDataField field);
		[CCode (cname = "rb_metadata_get_mime")]
		public static unowned string get_mime (RhythmDB.RBMetaData md);
		[CCode (cname = "rb_metadata_get_missing_plugins")]
		public static bool get_missing_plugins (RhythmDB.RBMetaData md, out unowned string missing_plugins, out unowned string plugin_descriptions);
		[CCode (cname = "rb_metadata_get_saveable_types")]
		public static unowned string get_saveable_types (RhythmDB.RBMetaData md);
		[CCode (cname = "rb_metadata_has_audio")]
		public static bool has_audio (RhythmDB.RBMetaData md);
		[CCode (cname = "rb_metadata_has_missing_plugins")]
		public static bool has_missing_plugins (RhythmDB.RBMetaData md);
		[CCode (cname = "rb_metadata_has_other_data")]
		public static bool has_other_data (RhythmDB.RBMetaData md);
		[CCode (cname = "rb_metadata_has_video")]
		public static bool has_video (RhythmDB.RBMetaData md);
		[CCode (cname = "rb_metadata_load")]
		public static void load (RhythmDB.RBMetaData md, string uri) throws GLib.Error;
		[CCode (cname = "rb_metadata_reset")]
		public static void reset (RhythmDB.RBMetaData md);
		[CCode (cname = "rb_metadata_save")]
		public static void save (RhythmDB.RBMetaData md, string uri) throws GLib.Error;
		[CCode (cname = "rb_metadata_set")]
		public static bool @set (RhythmDB.RBMetaData md, RhythmDB.RBMetaDataField field, GLib.Value val);
	}
	[Compact]
	[CCode (ref_function = "rb_refstring_ref", unref_function = "rb_refstring_unref", type_id = "RHYTHM_DB_TYPE_RB_REF_STRING", cheader_filename = "rhythmdb/rhythmdb.h")]
	public class RBRefString {
		[CCode (cname = "rb_refstring_new", type = "RBRefString*", has_construct_function = false)]
		public RBRefString (string init);
		[CCode (cname = "rb_refstring_equal")]
		public static bool equal (void* ap, void* bp);
		[CCode (cname = "rb_refstring_find")]
		public static unowned RhythmDB.RBRefString find (string init);
		[CCode (cname = "rb_refstring_get")]
		public static unowned string @get (RhythmDB.RBRefString val);
		[CCode (cname = "rb_refstring_get_folded")]
		public static unowned string get_folded (RhythmDB.RBRefString val);
		[CCode (cname = "rb_refstring_get_sort_key")]
		public static unowned string get_sort_key (RhythmDB.RBRefString val);
		[CCode (cname = "rb_refstring_hash")]
		public static uint hash (void* p);
		[CCode (cname = "rb_refstring_system_init")]
		public static void system_init ();
		[CCode (cname = "rb_refstring_system_shutdown")]
		public static void system_shutdown ();
	}
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public class RBStringValueMap : GLib.Object {
		[CCode (cname = "rb_string_value_map_new", type = "RBStringValueMap*", has_construct_function = false)]
		public RBStringValueMap ();
		[CCode (cname = "rb_string_value_map_get")]
		public static bool @get (RhythmDB.RBStringValueMap map, string key, GLib.Value @out);
		[CCode (cname = "rb_string_value_map_peek")]
		public static GLib.Value peek (RhythmDB.RBStringValueMap map, string key);
		[CCode (cname = "rb_string_value_map_remove")]
		public static bool remove (RhythmDB.RBStringValueMap map, string key);
		[CCode (cname = "rb_string_value_map_set")]
		public static void @set (RhythmDB.RBStringValueMap map, string key, GLib.Value value);
		[CCode (cname = "rb_string_value_map_size")]
		public static uint size (RhythmDB.RBStringValueMap map);
		[CCode (cname = "rb_string_value_map_steal_hashtable")]
		public static unowned GLib.HashTable steal_hashtable (RhythmDB.RBStringValueMap map);
	}
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public class Tree : RhythmDB.DB {
		[CCode (cname = "rhythmdb_tree_new", type = "RhythmDB*", has_construct_function = false)]
		public Tree (string name);
		[CCode (cname = "rhythmdb_tree_error_quark")]
		public static GLib.Quark error_quark ();
	}
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public interface QueryResults {
		[CCode (cname = "rhythmdb_query_results_add_results")]
		public abstract void add_results (GLib.PtrArray entries);
		[CCode (cname = "rhythmdb_query_results_query_complete")]
		public abstract void query_complete ();
		[CCode (cname = "rhythmdb_query_results_set_query")]
		public abstract void set_query (GLib.PtrArray query);
	}
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public interface RbTreeDragDest {
		[CCode (cname = "rb_tree_drag_dest_drag_data_received")]
		public static bool drag_data_received (RhythmDB.RbTreeDragDest drag_dest, Gtk.TreePath dest, Gtk.TreeViewDropPosition pos, Gtk.SelectionData selection_data);
		[NoWrapper]
		public abstract bool rb_drag_data_received (RhythmDB.RbTreeDragDest drag_dest, Gtk.TreePath dest, Gtk.TreeViewDropPosition pos, Gtk.SelectionData selection_data);
		[NoWrapper]
		public abstract Gdk.Atom rb_get_drag_target (RhythmDB.RbTreeDragDest drag_dest, Gtk.Widget widget, Gdk.DragContext context, Gtk.TreePath dest_path, Gtk.TargetList target_list);
		[NoWrapper]
		public abstract bool rb_row_drop_position (RhythmDB.RbTreeDragDest drag_dest, Gtk.TreePath dest_path, GLib.List targets, Gtk.TreeViewDropPosition pos);
		[NoWrapper]
		public abstract bool rb_row_drop_possible (RhythmDB.RbTreeDragDest drag_dest, Gtk.TreePath dest_path, Gtk.TreeViewDropPosition pos, Gtk.SelectionData selection_data);
		[CCode (cname = "rb_tree_drag_dest_row_drop_position")]
		public static bool row_drop_position (RhythmDB.RbTreeDragDest drag_dest, Gtk.TreePath dest_path, GLib.List targets, Gtk.TreeViewDropPosition pos);
		[CCode (cname = "rb_tree_drag_dest_row_drop_possible")]
		public static bool row_drop_possible (RhythmDB.RbTreeDragDest drag_dest, Gtk.TreePath dest_path, Gtk.TreeViewDropPosition pos, Gtk.SelectionData selection_data);
	}
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public interface RbTreeDragSource {
		[CCode (cname = "rb_tree_drag_source_drag_data_delete")]
		public static bool drag_data_delete (RhythmDB.RbTreeDragSource drag_source, GLib.List path_list);
		[CCode (cname = "rb_tree_drag_source_drag_data_get")]
		public static bool drag_data_get (RhythmDB.RbTreeDragSource drag_source, GLib.List path_list, Gtk.SelectionData selection_data);
		[NoWrapper]
		public abstract bool rb_drag_data_delete (RhythmDB.RbTreeDragSource drag_source, GLib.List path_list);
		[NoWrapper]
		public abstract bool rb_drag_data_get (RhythmDB.RbTreeDragSource drag_source, GLib.List path_list, Gtk.SelectionData selection_data);
		[NoWrapper]
		public abstract bool rb_row_draggable (RhythmDB.RbTreeDragSource drag_source, GLib.List path_list);
		[CCode (cname = "rb_tree_drag_source_row_draggable")]
		public static bool row_draggable (RhythmDB.RbTreeDragSource drag_source, GLib.List path_list);
	}
	[CCode (cprefix = "RHYTHMDB_ENTRY_", cheader_filename = "rhythmdb/rhythmdb.h")]
	public enum EntryCategory {
		NORMAL,
		STREAM,
		CONTAINER,
		VIRTUAL
	}
	[CCode (cprefix = "RHYTHMDB_ERROR_ACCESS_", has_type_id = false, cheader_filename = "rhythmdb/rhythmdb.h")]
	public enum Error {
		FAILED
	}
	[CCode (cprefix = "RHYTHMDB_PROP_", cheader_filename = "rhythmdb/rhythmdb.h")]
	public enum PropType {
		TYPE,
		ENTRY_ID,
		TITLE,
		GENRE,
		ARTIST,
		ALBUM,
		COMMENT,
		TRACK_NUMBER,
		DISC_NUMBER,
		MUSICBRAINZ_TRACKID,
		MUSICBRAINZ_ARTISTID,
		MUSICBRAINZ_ALBUMID,
		MUSICBRAINZ_ALBUMARTISTID,
		ARTIST_SORTNAME,
		ALBUM_SORTNAME,
		DURATION,
		FILE_SIZE,
		LOCATION,
		MOUNTPOINT,
		MTIME,
		FIRST_SEEN,
		LAST_SEEN,
		RATING,
		PLAY_COUNT,
		LAST_PLAYED,
		BITRATE,
		DATE,
		TRACK_GAIN,
		TRACK_PEAK,
		ALBUM_GAIN,
		ALBUM_PEAK,
		MIMETYPE,
		TITLE_SORT_KEY,
		GENRE_SORT_KEY,
		ARTIST_SORT_KEY,
		ALBUM_SORT_KEY,
		ARTIST_SORTNAME_SORT_KEY,
		ALBUM_SORTNAME_SORT_KEY,
		TITLE_FOLDED,
		GENRE_FOLDED,
		ARTIST_FOLDED,
		ALBUM_FOLDED,
		ARTIST_SORTNAME_FOLDED,
		ALBUM_SORTNAME_FOLDED,
		LAST_PLAYED_STR,
		PLAYBACK_ERROR,
		HIDDEN,
		FIRST_SEEN_STR,
		LAST_SEEN_STR,
		SEARCH_MATCH,
		YEAR,
		STATUS,
		DESCRIPTION,
		SUBTITLE,
		SUMMARY,
		LANG,
		COPYRIGHT,
		IMAGE,
		POST_TIME,
		KEYWORD
	}
	[CCode (cprefix = "RHYTHMDB_PROPERTY_MODEL_COLUMN_", cheader_filename = "rhythmdb/rhythmdb.h")]
	public enum PropertyModelColumn {
		TITLE,
		PRIORITY,
		NUMBER
	}
	[CCode (cprefix = "RHYTHMDB_QUERY_MODEL_LIMIT_", cheader_filename = "rhythmdb/rhythmdb.h")]
	public enum QueryModelLimitType {
		NONE,
		COUNT,
		SIZE,
		TIME
	}
	[CCode (cprefix = "RHYTHMDB_QUERY_", cheader_filename = "rhythmdb/rhythmdb.h")]
	public enum QueryType {
		END,
		DISJUNCTION,
		SUBQUERY,
		PROP_EQUALS,
		PROP_LIKE,
		PROP_NOT_LIKE,
		PROP_PREFIX,
		PROP_SUFFIX,
		PROP_GREATER,
		PROP_LESS,
		PROP_CURRENT_TIME_WITHIN,
		PROP_CURRENT_TIME_NOT_WITHIN,
		PROP_YEAR_EQUALS,
		PROP_YEAR_GREATER,
		PROP_YEAR_LESS
	}
	[CCode (cprefix = "RB_METADATA_ERROR_", has_type_id = false, cheader_filename = "rhythmdb/rhythmdb.h")]
	public enum RBMetaDataError {
		IO,
		MISSING_PLUGIN,
		UNRECOGNIZED,
		UNSUPPORTED,
		GENERAL,
		INTERNAL,
		EMPTY_FILE
	}
	[CCode (cprefix = "RB_METADATA_FIELD_", has_type_id = false, cheader_filename = "rhythmdb/rhythmdb.h")]
	public enum RBMetaDataField {
		TITLE,
		ARTIST,
		ALBUM,
		DATE,
		GENRE,
		COMMENT,
		TRACK_NUMBER,
		MAX_TRACK_NUMBER,
		DISC_NUMBER,
		MAX_DISC_NUMBER,
		DESCRIPTION,
		VERSION,
		ISRC,
		ORGANIZATION,
		COPYRIGHT,
		CONTACT,
		LICENSE,
		PERFORMER,
		DURATION,
		CODEC,
		BITRATE,
		TRACK_GAIN,
		TRACK_PEAK,
		ALBUM_GAIN,
		ALBUM_PEAK,
		LANGUAGE_CODE,
		MUSICBRAINZ_TRACKID,
		MUSICBRAINZ_ARTISTID,
		MUSICBRAINZ_ALBUMID,
		MUSICBRAINZ_ALBUMARTISTID,
		ARTIST_SORTNAME,
		ALBUM_SORTNAME,
		LAST
	}
	[CCode (cprefix = "RB_METADATA_ERROR_", cheader_filename = "rhythmdb/rhythmdb.h")]
	public enum RBMetadataErrorType {
		IO,
		MISSING_PLUGIN,
		UNRECOGNIZED,
		UNSUPPORTED,
		GENERAL,
		INTERNAL,
		EMPTY_FILE
	}
	[CCode (cprefix = "RB_METADATA_FIELD_", cheader_filename = "rhythmdb/rhythmdb.h")]
	public enum RBMetadataFieldType {
		TITLE,
		ARTIST,
		ALBUM,
		DATE,
		GENRE,
		COMMENT,
		TRACK_NUMBER,
		MAX_TRACK_NUMBER,
		DISC_NUMBER,
		MAX_DISC_NUMBER,
		DESCRIPTION,
		VERSION,
		ISRC,
		ORGANIZATION,
		COPYRIGHT,
		CONTACT,
		LICENSE,
		PERFORMER,
		DURATION,
		CODEC,
		BITRATE,
		TRACK_GAIN,
		TRACK_PEAK,
		ALBUM_GAIN,
		ALBUM_PEAK,
		LANGUAGE_CODE,
		MUSICBRAINZ_TRACKID,
		MUSICBRAINZ_ARTISTID,
		MUSICBRAINZ_ALBUMID,
		MUSICBRAINZ_ALBUMARTISTID,
		ARTIST_SORTNAME,
		ALBUM_SORTNAME
	}
	[CCode (cprefix = "RB_TREE_DEST_", has_type_id = false, cheader_filename = "rhythmdb/rhythmdb.h")]
	public enum RbTreeDestFlag {
		EMPTY_VIEW_DROP,
		CAN_DROP_INTO,
		CAN_DROP_BETWEEN,
		SELECT_ON_DRAG_TIMEOUT
	}
	[CCode (cprefix = "RHYTHMDB_TREE_ERROR_DATABASE_TOO_", has_type_id = false, cheader_filename = "rhythmdb/rhythmdb.h")]
	public enum RhythmTreeDBError {
		NEW
	}
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public delegate void EntryActionFunc (RhythmDB.Entry entry);
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public delegate bool EntryCanSyncFunc (RhythmDB.DB db, RhythmDB.Entry entry);
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public delegate unowned string EntryStringFunc (RhythmDB.Entry entry);
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public delegate void EntrySyncFunc (RhythmDB.DB db, RhythmDB.Entry entry, GLib.SList changes, GLib.Error error);
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public const string PROP_ALBUM_ARTIST;
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public const string PROP_ALBUM_ARTIST_SORTNAME;
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public const string PROP_COVER_ART;
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public const string PROP_COVER_ART_URI;
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public const string PROP_STREAM_SONG_ALBUM;
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public const string PROP_STREAM_SONG_ARTIST;
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public const string PROP_STREAM_SONG_TITLE;
	[CCode (cheader_filename = "rhythmdb/rhythmdb.h")]
	public const int QUERY_MODEL_SUGGESTED_UPDATE_CHUNK;
	[CCode (cname = "rb_tree_dnd_add_drag_dest_support", cheader_filename = "rhythmdb/rhythmdb.h")]
	public static void rb_tree_dnd_add_drag_dest_support (Gtk.TreeView tree_view, RhythmDB.RbTreeDestFlag flags, Gtk.TargetEntry[] targets, Gdk.DragAction actions);
	[CCode (cname = "rb_tree_dnd_add_drag_source_support", cheader_filename = "rhythmdb/rhythmdb.h")]
	public static void rb_tree_dnd_add_drag_source_support (Gtk.TreeView tree_view, Gdk.ModifierType start_button_mask, Gtk.TargetEntry[] targets, Gdk.DragAction actions);
}
